@charset "UTF-8";

@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Kaushan+Script&family=Work+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap'); 

@font-face {
    font-family: 'Android';
    src: url('../fontes/idroid.otf') format(opentype);
    font-weight: normal; 
    /* Veja que na parte da "url" ainda precisamos colocar dois pontos antes de "fonte" pq nós estamos na pasta do CSS agora, qunado colocamos só um ponto(.), está representando a pasta atual, por isso não é necessário colocarmos(pois ja é subtentendido), agora quando colocamos dois pontos(..), ele entende que VOLTA uma pasta, e aí sim vai procurar a pasta fontes e dps acha nossa fonte desejada.*/
}

/* 
    EXPLICANDO USAR O SINAL DE ">" NAS DIVS MAIS APRODUNDADAMENTE

    Tem um negócio a se comentar que eu não tinha entendido antes sobre quando o guanabara queria editar tais coisas dentro de divs, por exemplo, quando queria editar o parágrafo dentro do <header> la. Percebe-se que foi colocado o sinal de maior ">" depois do header. Isso porque o parágrafo está diretamente dentro do header e de ninguém mais. Não funcionaria se esse parágrafo estivesse dentro de uma outra div, por exemplo. Que é exatamente o que aconteceu no conteúdo principal da nossa página, la no <main>. Fomos tentar editar o parágrafo usando o sinal de maior, e deu erro, não foi nada. Isso se dá exatamente pq os parágrados estão dentro de um article, ou seja, tem alguma coisa atrapalhando entre ele o <main>. Para isso, nós devemos colocar diretamente la no comando, sem colocar o sinal de maior entre o <main> e o <p>. Isso irá generalizar para todos os parágrafos que estão dentro do <main>. Basicamente é essa a diferença de usar o ">", se vc usar, vai restringir a aquele que ja está ligado diretamente, sem nenhuma div atrapalhando, e se vc não usar, generaliza para todos.
*/

/* 
    PALETA DE CORES MONOCROMÁTICA
    - #c5ebd6
    - #83E1AD
    - #3DDC84
    - #2FA866
    - #1A5C37
    - #063d1e

    Essa acima é minha paleta de cores que irão ser utilizadas neste website, entretanto, grande parte dos desenvolvedores tem o costume de apenas copiar e colar tal cor(porexemplo) para o seu lugar e ir fazendo isso para tudo, copindo aí de cima e colando no canto escolhido, enfim. Para facilitar isto, usamos as variáveis no css, pq quando mudarmos na área das variáveis, vai automaticamente generalizar para todo o resto. E isso conta para todos os tipos, não so cores. Para isso usamos a tag ":root", e para cada variável nós colocamos dois traços "--" e depois o nome da variável, tudo junto. E assim, após apertarmos CONTROL + ESPAÇO na área que iremos colocar tais cores, ou textos, enfim, e irão aparecer la tranquilamente. 

    PROPRIEDADES DE ESTILO PARA LISTAS:

    Segue algumas Propriedades de Estilo extras apresentadas no vídeo para usarmos dentro de seletores de listas ( ex.: ul {...} ):

    Quando criamos uma lista dentro de outro elemento, dentro de um aside por exemplo, geralmente as "bolinhas" da lista (marcadores sequenciais no caso de listas ordenadas) irão ficar para fora do elemento pai (aside)... Para resolver isso e manter a lista inteira dentro do elemento pai, devemos utilizar a Propriedade de Estilo " list-style-position " com o valor " inside " (por padrão marcadores de listas são posicionados com o valor " outside "). Essa propriedade define a posição dos marcadores da lista e dessa forma as "bolinhas" ficarão para dentro do elemento pai.

    Outra questão, às vezes temos uma lista com muitos itens, muito extensa... E queremos dividi-la em duas partes para manter uma formatação mais agradável... Para fazer isso, temos a Propriedade de Estilo " columns " com o valor " 2 ". Com isso iremos dividir a nossa lista em duas colunas (se quiser dividir em mais de duas colunas é só alterar o valor numérico da propriedade).

    É possível trocar as "bolinhas" ou marcadores de listas por outro símbolo, um emoji por exemplo. Para fazer isso, devemos usar a Propriedade de Estilo " list-style-type "... Como valor dessa propriedade, devemos colocar entre aspas 'simples' o número do código do emoji que escolhermos (sem o "U+"), e após isso, para de fato carregar o emoji, adicionar uma contrabarra ( \ ) antes do código do emoji e ainda dentro das aspas 'simples'. Obs.: A troca de símbolos de lista não é 100% compatível com todos os navegadores.

    Uma coisa que pode acontecer é o nosso símbolo ficar "grudado" no item da lista, para evitar isso é indicado acrescentar um "espaço" entre o emoji e o item de lista. Para fazer isso, ainda dentro das aspas 'simples' e DEPOIS do código do emoji, acrescente outra contrabarra ( \ ) e logo após isso o código " 00A0 " ou " 0020 " (comando de espaço ). Se você quiser, pode inserir mais de um espaço, é só repetir o processo. Obs.: Sempre que você quiser dar um "espaço" ou inserir emojis pelo CSS, para qualquer outro elemento e não somente listas, faça como foi orientado nesse texto. 

    MARGIN NEGATIVA:

    No nosso projeto, dentro da área " Saiba Mais " (aside), formatamos o nosso h3 de um jeito que parece que o subtítulo faz parte do topo da caixa. Para fazer isso, inicialmente atribuímos um destaque de cores ao subtítulo e adicionamos um pequeno padding de 10px no mesmo... 

    O resultado desejado seria que a caixa do h3 crescesse para "fora" e ocupasse a exata forma do topo da caixa do aside, resultando no efeito descrito.

    Para isso, configuramos as margins laterais e superior do nosso h3 com um valor negativo de -10px, dessa forma a caixa do h3 irá crescer para "fora" e ocupará a forma do topo da caixa aside. A margin (espaçamento externo) foi configurada com um valor negativo, na prática essa margin está indo para dentro e se expandindo de forma inversa, abrangendo o topo do aside. Uma mesma configuração com um valor positivo no margin não daria o mesmo efeito.

    Para fechar, posteriormente é só fazer o arredondamento da parte de cima da caixa do h3, para ficar condizente com a parte inferior da nossa caixa aside.
    */

:root {
    --cor0: #c5ebd6;
    --cor1: #83E1AD;
    --cor2: #3DDC84;
    --cor3: #2FA866;
    --cor4: #1A5C37;
    --cor5: #063d1e;

    --fonte-padrao: Arial, Verdana, Helvetica, sans-serif;
    --fontedestaque: 'Bebas Neue', sans-serif;
    --fonteandroid: 'Android', sans-serif; 
}

* {
    margin: 0px;
    padding: 0px;
}

body {
    background-color:var(--cor0);
    font-family: var(--fonte-padrao);
}

.externo::after {
    content: '\1F517';
}

header {
    background-image: linear-gradient(180deg, var(--cor3), var(--cor5));
    text-align: center;
    min-height: 150px;
    padding-top: 40px;
    padding-bottom: 10px;
}

header > h1 {
    color:white;
    font-family: var(--fontedestaque);
    font-size: 3em;
    font-weight: normal;
    margin-bottom: 20px;
    text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.315);
}

header > p {
    color:white;
    font-family: var(--fonte-padrao);
    font-size: 1.2em;
    max-width: 500px;
    padding-right: 10px;
    padding-left: 10px;
    margin: auto;
}

nav {
    background-color: var(--cor5);
    box-shadow: 0px 5px 8px 0px rgba(0, 0, 0, 0.315);;
    padding: 10px;
}

nav > a { 
    color: var(--cor0);
    text-decoration: none;
    font-weight: bold;
    border-radius: 5px;
    padding: 10px;
    transition-duration: 0.3s;
}

nav > a:hover {
    background-color: var(--cor3);
    color: var(--cor5);
}

main {
    margin: auto;
    min-width: 300px;
    max-width: 800px;
    padding: 15px;
    padding-top: 12px;
    padding-bottom: 1px;
    background-color: white;
}

main h1 {
    color: var(--cor4); 
    font-family: var(--fonteandroid);
    font-size: 1.8em;
    font-weight: normal;
}

main h2 {
    font-family: var(--fonteandroid);
    font-weight: normal;
    font-size: 1.4em;
    text-indent: 8px;
    color: var(--cor3);
    background-image: linear-gradient(90deg, var(--cor1), transparent);
}

main p {
    margin: 15px 0px;
    text-align: justify;
    line-height: 1.6em;
    font-size: 1.05em;
    text-indent: 30px;
}

main strong {
    color: var(--cor4);
}

main img {
    width: 100%;
    border-radius: 2px;
}

.bugdroid {
    max-width: 350px;
    margin: auto;
    display: block;
}

main a {
    text-decoration: none;
    font-weight: bold;
    color: var(--cor5);
    background-color: var(--cor2);
    padding: 2px 6px;
    border-radius: 3px;
}

main a:hover {
    color: var(--cor4);
    text-decoration: underline;
}

.video {
    background-color: var(--cor5);
    margin: 0px -15px 30px -15px; 
    padding: 20px;
    padding-bottom: 56.5%;
    position: relative;
}

.video > iframe {
    position: absolute;
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
}

aside {
    background-color: #83e1adb2;
    border-radius: 8px;
    padding: 0.5px 20px;
    margin-top: 20px;
    border-radius: 0px 0px 8px 8px;
    box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.233);
}

aside > h3 {
    background-color: var(--cor4);
    color: white;
    margin: -20px -20px 0px -20px;
    padding: 8px;
    border-radius: 8px 8px 0px 0px;
}

aside > ul {
    list-style-type: '\2714\00A0\00A0';
    list-style-position: inside;
    columns: 2;
}

footer {
    background-color: var(--cor4);
    color: white;
    padding: 9px;
    text-align: center;
    font-size: 0.8em;
}

footer a {
    color: white;
    text-decoration: none;
}

footer a:hover{
    color: var(--cor3);
}
